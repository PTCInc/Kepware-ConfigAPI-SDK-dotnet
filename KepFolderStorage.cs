using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using YamlDotNet.Serialization.NamingConventions;
using YamlDotNet.Serialization;
using KepwareSync.Model;
using KepwareSync.Serializer;
using YamlDotNet.Serialization.NodeTypeResolvers;

namespace KepwareSync
{
    internal class KepFolderStorage
    {
        private readonly YamlSerializer m_yamlSerializer;
        private readonly CsvTagSerializer m_csvTagSerializer;
        private readonly DataTypeEnumConverterProvider m_dataTypeEnumConverterProvider;

        public KepFolderStorage()
        {
            m_yamlSerializer = new YamlSerializer();
            m_csvTagSerializer = new CsvTagSerializer();
            m_dataTypeEnumConverterProvider = new DataTypeEnumConverterProvider();
        }

        public async Task ExportChannelsAsYamlAsync(
            string baseFolder,
            ChannelCollection? channels)
        {
            if (channels == null) return;

            foreach (var channel in channels)
            {
                var channelFolder = Path.Combine(baseFolder, channel.Name);

                // Export Channel
                var channelFile = Path.Combine(channelFolder, "channel.yaml");
                await m_yamlSerializer.SaveAsYaml(channelFile, channel);

                if (channel.Devices != null)
                {
                    foreach (var device in channel.Devices)
                    {
                        var deviceFolder = Path.Combine(channelFolder, device.Name);
                        var dataTypeConverter = m_dataTypeEnumConverterProvider.GetDataTypeEnumConverter(device.GetDynamicProperty<string>(Properties.DeviceDriver));

                        // Export Device
                        var deviceFile = Path.Combine(deviceFolder, "device.yaml");
                        await m_yamlSerializer.SaveAsYaml(deviceFile, device);

                        if (device.Tags != null)
                            await m_csvTagSerializer.ExportTagsAsync(Path.Combine(deviceFolder, "tags.csv"), device.Tags.Items, dataTypeConverter);
                        // use CsvTagSerializer to export device.Tags as CSV 

                        if (device.TagGroups != null)
                        {
                            foreach (var tagGroup in device.TagGroups.Where(grp => !grp.IsAutogenerated))
                            {
                                var tagGroupFolder = Path.Combine(deviceFolder, tagGroup.Name);

                                // Export TagGroup
                                var tagGroupFile = Path.Combine(tagGroupFolder, "tagGroup.yaml");
                                await m_yamlSerializer.SaveAsYaml(tagGroupFile, tagGroup);

                                // use CsvTagSerializer to export tagGroup.Tags as CSV 
                                if (tagGroup.Tags != null)
                                    await m_csvTagSerializer.ExportTagsAsync(Path.Combine(tagGroupFolder, "tags.csv"), tagGroup.Tags.Items, dataTypeConverter);
                            }
                        }
                    }
                }
            }
        }
    }
}
