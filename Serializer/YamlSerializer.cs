using KepwareSync.Model;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using YamlDotNet.Serialization.NamingConventions;
using YamlDotNet.Serialization;

namespace KepwareSync.Serializer
{
    public class YamlSerializer
    {
        private readonly ISerializer _serializer;

        public YamlSerializer()
        {
            var context = new KepYamlContext();
            _serializer = new StaticSerializerBuilder(context)
                .WithTypeConverter(new BaseEntityYamlTypeConverter(new HashSet<string>()
                {
                    Properties.NonSerialized.TagGrpTotalTagCount,
                    Properties.NonSerialized.TagGrpTagCount,
                    Properties.NonSerialized.ChannelTagCount,
                    Properties.NonSerialized.Autogenerated,
                }))
                .WithNamingConvention(CamelCaseNamingConvention.Instance) // Optional
                .Build();
        }

        public Task SaveAsYaml(string filePath, object entity)
        {
            var yaml = _serializer.Serialize(entity);
            Directory.CreateDirectory(Path.GetDirectoryName(filePath)!); // Erstelle Verzeichnis, falls es nicht existiert

            if (yaml.Trim().Equals("{}"))
            {
                //don't write empty files
                if (File.Exists(filePath))
                {
                    File.Delete(filePath);
                }
                return Task.CompletedTask;
            }
            else
            {
                return File.WriteAllTextAsync(filePath, yaml);
            }
        }
    }

}
