using System;
using System.Collections.Frozen;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading.Tasks;

namespace Kepware.Api.Model
{
    public static class Properties
    {
        public const string DeviceDriver = "servermain.MULTIPLE_TYPES_DEVICE_DRIVER";
        public const string Description = "common.ALLTYPES_DESCRIPTION";
        public const string Name = "common.ALLTYPES_NAME";
        public const string ProjectId = "PROJECT_ID";

        public const string ChannelUid = "servermain.CHANNEL_UNIQUE_ID";

        public static class Tag
        {
            public const string Address = "servermain.TAG_ADDRESS";
            public const string DataType = "servermain.TAG_DATA_TYPE";
            public const string ReadWriteAccess = "servermain.TAG_READ_WRITE_ACCESS";
            public const string ScanRateMilliseconds = "servermain.TAG_SCAN_RATE_MILLISECONDS";
            public const string ScalingType = "servermain.TAG_SCALING_TYPE";
            public const string ScalingRawLow = "servermain.TAG_SCALING_RAW_LOW";
            public const string ScalingRawHigh = "servermain.TAG_SCALING_RAW_HIGH";
            public const string ScalingScaledLow = "servermain.TAG_SCALING_SCALED_LOW";
            public const string ScalingScaledHigh = "servermain.TAG_SCALING_SCALED_HIGH";
            public const string ScalingScaledDataType = "servermain.TAG_SCALING_SCALED_DATA_TYPE";
            public const string ScalingClampLow = "servermain.TAG_SCALING_CLAMP_LOW";
            public const string ScalingClampHigh = "servermain.TAG_SCALING_CLAMP_HIGH";
            public const string ScalingUnits = "servermain.TAG_SCALING_UNITS";
            public const string ScalingNegateValue = "servermain.TAG_SCALING_NEGATE_VALUE";

            public static readonly FrozenSet<string> IgnoreWhenScalingDisalbedHashSet = new HashSet<string> {
                    ScalingScaledDataType,
                    ScalingScaledHigh,
                    ScalingScaledLow,
                    ScalingRawHigh,
                    ScalingRawLow,
                    ScalingClampHigh,
                    ScalingClampLow,
                    ScalingNegateValue,
                    ScalingUnits,
                }.ToFrozenSet();
        }

        public static class NonUpdatable
        {

            public const string ChannelUniqueId = "servermain.CHANNEL_UNIQUE_ID";
            public const string DeviceUniqueId = "servermain.DEVICE_UNIQUE_ID";

            public static readonly FrozenSet<string> AsHashSet = new HashSet<string>()
            {
                ChannelUniqueId,
                DeviceUniqueId,
            }.ToFrozenSet();
        }

        public static class NonSerialized
        {
            public const string ChannelAssignment = "servermain.DEVICE_CHANNEL_ASSIGNMENT";
            public const string TagGrpTotalTagCount = "servermain.TAGGROUP_TOTAL_TAG_COUNT";
            public const string TagGrpTagCount = "servermain.TAGGROUP_LOCAL_TAG_COUNT";
            public const string ChannelTagCount = "servermain.CHANNEL_STATIC_TAG_COUNT";
            public const string TagGroupAutogenerated = "servermain.TAGGROUP_AUTOGENERATED";
            public const string TagAutogenerated = "servermain.TAG_AUTOGENERATED";
            public const string DeviceStaticTagCount = "servermain.DEVICE_STATIC_TAG_COUNT";

            public static readonly FrozenSet<string> AsHashSet = new HashSet<string>()
                {
                    ChannelAssignment,
                    TagGrpTotalTagCount,
                    TagGrpTagCount,
                    ChannelTagCount,
                    TagGroupAutogenerated,
                    TagAutogenerated ,
                    DeviceStaticTagCount,
                }.ToFrozenSet();
        }
    }
}
