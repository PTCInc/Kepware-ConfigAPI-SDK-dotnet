using System;
using System.Collections.Generic;
using System.Text.Json.Serialization;
using YamlDotNet.Core.Tokens;
using YamlDotNet.Serialization;

namespace KepwareSync.Model
{
    [Endpoint("/config/v1/project")]
    public class Project : BaseEntity
    {
        [YamlIgnore]
        [JsonPropertyName("channels")]
        [JsonPropertyOrder(100)]
        public ChannelCollection? Channels { get; set; }

        public override void Cleanup(bool blnRemoveProjectId = false)
        {
            base.Cleanup(blnRemoveProjectId);


            if (Channels != null)
            {
                foreach (var channel in Channels)
                {
                    channel.Cleanup(blnRemoveProjectId);
                }
            }
        }
    }

    [Endpoint("/config/v1/project/channels/{name}")]
    public class Channel : NamedUidEntity
    {
        [YamlIgnore]
        [JsonPropertyName("devices")]
        [JsonPropertyOrder(100)]
        public DeviceCollection? Devices { get; set; }

        protected override string UniqueIdKey => Properties.NonUpdatable.ChannelUniqueId;

        public override void Cleanup(bool blnRemoveProjectId = false)
        {
            base.Cleanup(blnRemoveProjectId);

            if (Devices != null)
            {
                foreach (var device in Devices)
                {
                    device.Cleanup(blnRemoveProjectId);
                }
            }
        }
    }

    [Endpoint("/config/v1/project/channels/{channelName}/devices/{deviceName}")]
    public class Device : NamedUidEntity
    {
        [YamlIgnore]
        [JsonPropertyName("tags")]
        [JsonPropertyOrder(100)]
        public DeviceTagCollection? Tags { get; set; }

        [YamlIgnore]
        [JsonPropertyName("tag_groups")]
        [JsonPropertyOrder(200)]
        public DeviceTagGroupCollection? TagGroups { get; set; }
        protected override string UniqueIdKey => Properties.NonUpdatable.DeviceUniqueId;


        public override void Cleanup(bool blnRemoveProjectId = false)
        {
            base.Cleanup(blnRemoveProjectId);

            if (Tags != null)
            {
                foreach (var tag in Tags)
                {
                    tag.Cleanup(blnRemoveProjectId);
                }
            }

            if (TagGroups != null)
            {
                foreach (var tagGroup in TagGroups)
                {
                    tagGroup.Cleanup(blnRemoveProjectId);
                }
            }
        }
    }

    [RecursiveEndpoint("/config/v1/project/channels/{channelName}/devices/{deviceName}", "/tag_groups/{groupName}", typeof(DeviceTagGroup))]
    public class DeviceTagGroup : NamedEntity
    {
        [YamlIgnore]
        [JsonPropertyName("tags")]
        public DeviceTagGroupTagCollection? Tags { get; set; }

        [YamlIgnore]
        [JsonPropertyName("tag_groups")]
        public DeviceTagGroupCollection? TagGroups { get; set; }

        [YamlIgnore]
        [JsonIgnore]
        public bool IsAutogenerated => GetDynamicProperty<bool>(Properties.NonSerialized.TagGroupAutogenerated) == true;

        public override void Cleanup(bool blnRemoveProjectId = false)
        {
            base.Cleanup(blnRemoveProjectId);

            if (Tags != null)
            {
                foreach (var tag in Tags)
                {
                    tag.Cleanup(blnRemoveProjectId);
                }
            }

            if (TagGroups != null)
            {
                foreach (var tagGroup in TagGroups)
                {
                    tagGroup.Cleanup(blnRemoveProjectId);
                }
            }
        }
    }

    public class Tag : NamedEntity
    {
        [YamlIgnore]
        [JsonIgnore]
        public bool IsAutogenerated => GetDynamicProperty<bool>(Properties.NonSerialized.TagAutogenerated) == true;

        protected override ISet<string>? ConditionalNonSerialized()
        {
            if (GetDynamicProperty<int>(Properties.Tag.ScalingType) == 0)
            {
                return Properties.Tag.IgnoreWhenScalingDisalbedHashSet;
            }
            return null;
        }
    }

    [Endpoint("/config/v1/project/channels")]
    public class ChannelCollection : EntityCollection<Channel>
    {
        public ChannelCollection() { }

    }

    [Endpoint("/config/v1/project/channels/{channelName}/devices")]
    public class DeviceCollection : EntityCollection<Device>
    {
        public DeviceCollection() { }
    }

    [Endpoint("/config/v1/project/channels/{channelName}/devices/{deviceName}/tags")]
    public class DeviceTagCollection : EntityCollection<Tag>
    {
        public DeviceTagCollection() { }
        public DeviceTagCollection(IEnumerable<Tag> collection)
            : base(collection)
        {
            
        }
    }

    [Endpoint("/config/v1/project/channels/{channelName}/devices/{deviceName}/consumer_exchange_groups")]
    public class ConsumerExchangeGroupCollection : EntityCollection<DefaultEntity>
    {
        public ConsumerExchangeGroupCollection() { }
    }

    [Endpoint("/config/v1/project/channels/{channelName}/devices/{deviceName}/consumer_exchange_groups/{groupName}/consumer_exchanges")]
    public class ConsumerExchangeCollection : EntityCollection<DefaultEntity>
    {
        public ConsumerExchangeCollection() { }
    }

    [Endpoint("/config/v1/project/channels/{channelName}/devices/{deviceName}/producer_exchange_groups")]
    public class ProducerExchangeGroupCollection : EntityCollection<DefaultEntity>
    {
        public ProducerExchangeGroupCollection() { }
    }

    [Endpoint("/config/v1/project/channels/{channelName}/devices/{deviceName}/producer_exchange_groups/{groupName}/producer_exchanges")]
    public class ProducerExchangeCollection : EntityCollection<DefaultEntity>
    {
        public ProducerExchangeCollection() { }
    }

    [Endpoint("/config/v1/project/channels/{channelName}/devices/{deviceName}/omni_mapping_groups")]
    public class OmniMappingGroupCollection : EntityCollection<DefaultEntity>
    {
        public OmniMappingGroupCollection() { }
    }

    [Endpoint("/config/v1/project/channels/{channelName}/devices/{deviceName}/omni_mapping_groups/{groupName}/omni_mappings")]
    public class OmniMappingCollection : EntityCollection<DefaultEntity>
    {
        public OmniMappingCollection() { }
    }

    [Endpoint("/config/v1/project/channels/{channelName}/devices/{deviceName}/omni_mapping_groups/{groupName}/omni_mappings/{mappingName}/omni_gas_alarms")]
    public class OmniAlarmCollection : EntityCollection<DefaultEntity>
    {
        public OmniAlarmCollection() { }
    }

    //[Endpoint("/config/v1/project/channels/{channelName}/devices/{deviceName}/tag_groups")]
    [RecursiveEndpoint("/config/v1/project/channels/{channelName}/devices/{deviceName}", "/tag_groups/{groupName}", typeof(DeviceTagGroup), suffix: "/tag_groups")]
    public class DeviceTagGroupCollection : EntityCollection<DeviceTagGroup>
    {
        public DeviceTagGroupCollection() { }
    }

    [RecursiveEndpoint("/config/v1/project/channels/{channelName}/devices/{deviceName}", "/tag_groups/{groupName}", typeof(DeviceTagGroup), suffix: "/tags")]
    public class DeviceTagGroupTagCollection : EntityCollection<Tag>
    {
        public DeviceTagGroupTagCollection() { }

        public DeviceTagGroupTagCollection(IEnumerable<Tag> collection)
            : base(collection)
        {
            
        }
    }

    [Endpoint("/config/v1/project/channels/{channelName}/phonebooks")]
    public class PhonebookCollection : EntityCollection<DefaultEntity>
    {
        public PhonebookCollection() { }
    }

    [Endpoint("/config/v1/project/channels/{channelName}/phonebooks/{phonebookName}/phonelist")]
    public class PhoneEntryCollection : EntityCollection<DefaultEntity>
    {
        public PhoneEntryCollection() { }
    }

    [Endpoint("/config/v1/project/channels/{channelName}/devices/{deviceName}/device_profiles")]
    public class DeviceProfileCollection : EntityCollection<DefaultEntity>
    {
        public DeviceProfileCollection() { }
    }
}
