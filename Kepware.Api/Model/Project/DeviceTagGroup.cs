using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json.Serialization;
using System.Threading.Tasks;
using YamlDotNet.Serialization;

namespace Kepware.Api.Model
{
    /// <summary>
    /// Represents a tag group in a device
    /// </summary>
    [RecursiveEndpoint("/config/v1/project/channels/{channelName}/devices/{deviceName}", "/tag_groups/{groupName}", typeof(DeviceTagGroup))]
    public class DeviceTagGroup : NamedEntity
    {
        public DeviceTagGroup()
        {

        }

        public DeviceTagGroup(string name, Device owner)
        {
            Owner = owner;
            Name = name;
        }

        public DeviceTagGroup(string name, DeviceTagGroup owner)
        {
            Owner = owner;
            Name = name;
        }

        /// <summary>
        /// Gets or sets the tags in the tag group
        /// </summary>
        [YamlIgnore]
        [JsonPropertyName("tags")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public DeviceTagGroupTagCollection? Tags { get; set; }

        /// <summary>
        /// Recursively cleans up the tag group and all its children
        /// </summary>
        [YamlIgnore]
        [JsonPropertyName("tag_groups")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public DeviceTagGroupCollection? TagGroups { get; set; }

        /// <summary>
        /// Get a flag indicating if the tag group is autogenerated
        /// </summary>
        [YamlIgnore]
        [JsonIgnore]
        public bool IsAutogenerated => GetDynamicProperty<bool>(Properties.NonSerialized.TagGroupAutogenerated);

        /// <summary>
        /// Recursively cleans up the tag group and all its children
        /// </summary>
        /// <param name="defaultValueProvider"></param>
        /// <param name="blnRemoveProjectId"></param>
        /// <param name="cancellationToken"></param>
        /// <returns></returns>
        public override async Task Cleanup(IKepwareDefaultValueProvider defaultValueProvider, bool blnRemoveProjectId = false, CancellationToken cancellationToken = default)
        {
            await base.Cleanup(defaultValueProvider, blnRemoveProjectId, cancellationToken).ConfigureAwait(false);

            if (Tags != null)
            {
                foreach (var tag in Tags)
                {
                    await tag.Cleanup(defaultValueProvider, blnRemoveProjectId, cancellationToken).ConfigureAwait(false);
                }
            }

            if (TagGroups != null)
            {
                foreach (var tagGroup in TagGroups)
                {
                    await tagGroup.Cleanup(defaultValueProvider, blnRemoveProjectId, cancellationToken).ConfigureAwait(false);
                }
            }
        }
    }
}
